{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Axios from 'axios';\nimport React, { useState } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\nimport url from '../lib/url';\nimport Alert from './Alert';\nexport default function Contact(props) {\n  var _useState = useState({\n    name: '',\n    text: ''\n  }),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = useState(false),\n      isDisabled = _useState2[0],\n      setIsDisabled = _useState2[1];\n\n  var _useState3 = useState(false),\n      emailSent = _useState3[0],\n      setEmailSent = _useState3[1];\n\n  function emailIsValid(email) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  }\n\n  var handleMails = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var name, text;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = email.name, text = email.text;\n\n              if (!emailIsValid(name)) {\n                _context.next = 8;\n                break;\n              }\n\n              e.preventDefault();\n              _context.next = 5;\n              return Axios.post(\"\".concat(url, \"/email\"), {\n                emailFrom: name,\n                subject: \"Email Portfolio de la part de: \".concat(name),\n                message: text\n              });\n\n            case 5:\n              setEmailSent(true);\n              _context.next = 10;\n              break;\n\n            case 8:\n              e.preventDefault();\n              setIsDisabled(true);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleMails(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleName = function handleName(e) {\n    setEmail(_objectSpread(_objectSpread({}, email), {}, {\n      name: e.target.value\n    }));\n    setIsDisabled(false);\n  };\n\n  var handleText = function handleText(e) {\n    setEmail(_objectSpread(_objectSpread({}, email), {}, {\n      text: e.target.value\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Row, {\n    style: {\n      margin: '20px 0'\n    }\n  }, __jsx(Col, null), __jsx(Col, {\n    sm: 10,\n    md: 8,\n    lg: 6,\n    style: {\n      textAlign: 'center'\n    }\n  }, __jsx(Form, {\n    onSubmit: function onSubmit(e) {\n      return handleMails(e);\n    }\n  }, __jsx(FormGroup, null, __jsx(Label, {\n    style: {\n      color: '#3b5998',\n      fontSize: 18\n    },\n    \"for\": \"email\"\n  }, __jsx(\"b\", null, \"Email adress\")), __jsx(Input, {\n    style: {\n      fontSize: 20,\n      fontWeight: 700\n    },\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    placeholder: \"name@email.com\",\n    onChange: function onChange(e) {\n      return handleName(e);\n    }\n  }), isDisabled ? __jsx(Alert, {\n    color: \"danger\",\n    message: \"email invalid\"\n  }) : ''), __jsx(FormGroup, null, __jsx(Label, {\n    style: {\n      color: '#3b5998',\n      fontSize: 18\n    },\n    \"for\": \"comment\"\n  }, __jsx(\"b\", null, \"Message\")), __jsx(Input, {\n    style: {\n      fontSize: 20,\n      fontWeight: 700,\n      height: '20vh'\n    },\n    placeholder: \"your message\",\n    type: \"textarea\",\n    name: \"comment\",\n    id: \"comment\",\n    onChange: function onChange(e) {\n      return handleText(e);\n    }\n  })), __jsx(Button, {\n    disabled: isDisabled,\n    color: \"primary\"\n  }, \"Submit\"))), __jsx(Col, null)), emailSent ? __jsx(Row, null, __jsx(Col, {\n    sm: {\n      size: 4,\n      offset: 4\n    },\n    md: {\n      size: 4,\n      offset: 4\n    },\n    lg: {\n      size: 4,\n      offset: 4\n    }\n  }, __jsx(Alert, {\n    color: \"success\",\n    message: \"eMail sent!\"\n  }))) : '');\n}","map":null,"metadata":{},"sourceType":"module"}